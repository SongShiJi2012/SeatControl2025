from openpyxl import load_workbook

# === 🛠️ 全局配置部分（可自由修改） ===
INPUT_EXCEL_FILE = 'pin_config.xlsx'                # 输入 Excel 文件名
EXCEL_SHEET_NAME = 'PinInitCfg_P20'                # 需要读取的 Sheet 名称
OUTPUT_C_FILE = 'generated_config_P20.c'           # 生成的 .c 文件名
FILE_ENCODING = 'GBK'                               # 输出文件编码格式

def generate_config_code_with_header_and_include(excel_file, sheet_name):
    wb = load_workbook(excel_file)
    ws = wb[sheet_name]

    headers = [cell.value for cell in ws[1]]
    configs = [dict(zip(headers, row)) for row in ws.iter_rows(min_row=2, values_only=True)]

    code_lines = []

    # 文件说明注释头
    code_lines.append('/***********************************************************************************************')
    code_lines.append(f' * @file: {OUTPUT_C_FILE}')
    code_lines.append(' *')
    code_lines.append(' * @description: This file is auto-generated from Excel configuration using a Python script.')
    code_lines.append(' *               It defines the pin initialization array for SELECT_PLATFORM_PINS.')
    code_lines.append(' *')
    code_lines.append(' * @note: DO NOT EDIT THIS FILE MANUALLY.')
    code_lines.append(' ***********************************************************************************************/\n')

    # include 头文件
    code_lines.append('#include "pins_driver.h"\n')

    # 数组开始
    code_lines.append('const pin_settings_config_t g_pin_mux_InitConfigArr[SELECT_PLATFORM_PINS] =\n{')

    for config in configs:
        pin_val = config.get('pin', '')
        notes = config.get('notes', '')

        # 注释区
        if pin_val != '':
            code_lines.append(f'\t/* pin{pin_val} */')
        if notes:
            code_lines.append(f'\t/* {notes} */')

        code_lines.append('\t{')

        line_items = []

        # 固定顺序输出 pinEnable
        pin_enable_val = config.get("pinEnable", "")
        if pin_enable_val in [True, "TRUE", "True", 1, "1"]:
            line_items.append('\t\t.pinEnable     = TRUE,')
        else:
            line_items.append('\t\t.pinEnable     = FALSE,')

        for key in headers:
            if key in ['pin', 'pinEnable', 'notes'] or config.get(key, '') == '':
                continue
            val = config[key]
            if isinstance(val, int):
                line_items.append(f'\t\t.{key} = {val}u,')
            else:
                line_items.append(f'\t\t.{key} = {val},')

        code_lines.extend(line_items)
        code_lines.append('\t},\n')

    code_lines.append('};')

    return '\n'.join(code_lines)

if __name__ == '__main__':
    code = generate_config_code_with_header_and_include(INPUT_EXCEL_FILE, EXCEL_SHEET_NAME)
    with open(OUTPUT_C_FILE, 'w', encoding=FILE_ENCODING) as f:
        f.write(code)
    print(f"✅ 配置代码已生成到 {OUTPUT_C_FILE}，编码格式: {FILE_ENCODING}")
